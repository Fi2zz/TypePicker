/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./example/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./example/createPicker.ts":
/*!*********************************!*\
  !*** ./example/createPicker.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar src_1 = __webpack_require__(/*! ../src */ \"./src/index.ts\");\n\nvar Timex = {\n  isDate: function isDate(d) {\n    return d instanceof Date;\n  },\n  dateComponents: function dateComponents(input) {\n    var month = input.getMonth();\n    var year = input.getFullYear();\n    var date = input.getDate();\n    var day = input.getDay();\n    var hours = input.getHours();\n    var minutes = input.getMinutes();\n    var seconds = input.getSeconds();\n    var ms = input.getMilliseconds();\n    var dateString = input.toDateString();\n    var isoString = input.toISOString();\n    var time = input.getTime();\n    var timezoneOffset = input.getTimezoneOffset();\n    return {\n      year: year,\n      date: date,\n      month: month,\n      day: day,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      ms: ms,\n      milliseconds: ms,\n      dateString: dateString,\n      isoString: isoString,\n      time: time,\n      timezoneOffset: timezoneOffset\n    };\n  },\n  createDate: function createDate(options) {\n    var year = options.year,\n        month = options.month,\n        date = options.date,\n        _a = options.minutes,\n        minutes = _a === void 0 ? 0 : _a,\n        _b = options.hours,\n        hours = _b === void 0 ? 0 : _b,\n        _c = options.seconds,\n        seconds = _c === void 0 ? 0 : _c,\n        _d = options.milliseconds,\n        milliseconds = _d === void 0 ? 0 : _d;\n    return new Date(year, month, date, hours, minutes, seconds, milliseconds);\n  }\n};\nvar DOMHelpers = {\n  select: function select(selector, selector$2) {\n    if (!selector$2) {\n      if (typeof selector !== \"string\") {\n        return selector;\n      } else {\n        return document.querySelector(selector);\n      }\n    }\n\n    var selectAll = function selectAll(who, selector) {\n      var ArrayNodes = who.querySelectorAll(selector);\n\n      if (ArrayNodes.length <= 0) {\n        return null;\n      } else if (ArrayNodes.length === 1) {\n        return ArrayNodes[0];\n      } else {\n        return ArrayNodes;\n      }\n    };\n\n    return selectAll(selector, selector$2);\n  },\n  attr: function attr(el, _attr) {\n    return el.getAttribute(_attr);\n  },\n  \"class\": function _class(index, options) {\n    function classname(options) {\n      var isActive = options.isActive,\n          isStart = options.isStart,\n          isEnd = options.isEnd,\n          isDisabled = options.isDisabled,\n          inRange = options.inRange,\n          isEmpty = options.isEmpty;\n\n      if (isEmpty) {\n        return \"empty disabled\";\n      }\n\n      var className = \"\";\n\n      if (isActive) {\n        className = \"active\";\n\n        if (isStart) {\n          className = \"active start-date\";\n        } else if (isEnd) {\n          className = \"active end-date\";\n        }\n      }\n\n      if (inRange) {\n        return \"in-range\";\n      }\n\n      if (isDisabled && !isActive) {\n        className = \"disabled\";\n      }\n\n      return className;\n    }\n\n    var names = [\"calendar-cell\"];\n\n    if (index === 0) {\n      names.push(\"is-weekday\");\n    } else if (index === 6) {\n      names.push(\"is-weekend\");\n    }\n\n    names.push(classname(options));\n    return names.join(\" \").trim();\n  }\n};\n\nfunction createTemplate(data) {\n  var isDef = function isDef(v) {\n    return v !== undefined && v !== null;\n  };\n\n  function createTag(tag, props) {\n    if (!tag) {\n      tag = \"div\";\n    }\n\n    var children = \"\";\n    var attributes = [];\n\n    for (var key in props) {\n      var value = props[key];\n\n      if (isDef(value)) {\n        if (key !== \"children\") {\n          if (key === \"className\") {\n            key = \"class\";\n          }\n\n          attributes.push(key + \"=\\\"\" + value + \"\\\"\");\n        } else {\n          if (value !== false) {\n            if (Array.isArray(value)) {\n              children = value.filter(isDef).join(\"\");\n            } else {\n              children = value;\n            }\n          }\n        }\n      }\n    }\n\n    return \"<\" + tag + \" \" + attributes.join(\"\") + \">\" + children + \"</\" + tag + \">\";\n  }\n\n  var actionNode = function actionNode(type) {\n    var className = [\"calendar-action\", type];\n    return createTag(\"div\", {\n      className: className.join(\" \")\n    });\n  };\n\n  function dateNodes(data) {\n    var props = {\n      className: DOMHelpers[\"class\"](data.day, data.status),\n      children: []\n    };\n    props.children.push(createTag(\"div\", {\n      className: \"date\",\n      children: data.label\n    }));\n    props[\"data-date\"] = data.value;\n    props[\"data-disabled\"] = data.disabled;\n    return createTag(\"div\", props);\n  }\n\n  var calendars = data.map(function (item) {\n    var calendarViewData = [createTag(\"div\", {\n      className: \"calendar-head\",\n      children: item.heading\n    }), createTag(\"div\", {\n      className: \"calendar-day\",\n      children: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"].map(function (day) {\n        return createTag(\"div\", {\n          className: \"calendar-cell\",\n          children: day\n        });\n      })\n    }), createTag(\"div\", {\n      className: \"calendar-body\",\n      children: item.dates.map(dateNodes)\n    })];\n    return createTag(\"div\", {\n      className: \"calendar-item\",\n      children: calendarViewData\n    });\n  });\n  return [actionNode(\"prev\"), actionNode(\"next\")].concat(calendars).join(\"\");\n}\n\nfunction format(date, format) {\n  if (!format) {\n    format = \"YYYY-MM-DD\";\n  }\n\n  if (!Timex.isDate(date)) {\n    return null;\n  }\n\n  var padding = function padding(n) {\n    return \"\" + (n > 9 ? n : \"0\" + n);\n  };\n\n  format = format.toUpperCase();\n  date = date;\n  var parts = {\n    YYYY: date.getFullYear(),\n    DD: padding(date.getDate()),\n    MM: padding(date.getMonth() + 1),\n    D: date.getDate(),\n    M: date.getMonth() + 1\n  };\n  return format.replace(/(?:\\b|%)([dDMyY]+)(?:\\b|%)/g, function ($1) {\n    return parts[$1] === undefined ? $1 : parts[$1];\n  });\n}\n\nfunction parse(strDate, format) {\n  if (Timex.isDate(strDate)) {\n    return strDate;\n  }\n\n  if (!strDate) {\n    return null;\n  }\n\n  function parse(string) {\n    if (!string) return new Date();\n    if (string instanceof Date) return string;\n    var split = string.split(/\\W/).map(function (item) {\n      return parseInt(item, 10);\n    });\n    var date = new Date(split.join(\" \"));\n    if (!date.getTime()) return null;\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  var ret = parse(strDate);\n  if (ret) return ret;\n  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\n  var parseFlags = {\n    D: [/\\d{1,2}/, function (d, v) {\n      return d.day = parseInt(v);\n    }],\n    M: [/\\d{1,2}/, function (d, v) {\n      return d.month = parseInt(v) - 1;\n    }],\n    DD: [/\\d{2}/, function (d, v) {\n      return d.day = parseInt(v);\n    }],\n    MM: [/\\d{2}/, function (d, v) {\n      return d.month = parseInt(v) - 1;\n    }],\n    YY: [/\\d{2,4}/, function (d, v) {\n      return d.year = parseInt(v);\n    }],\n    YYYY: [/\\d{4}/, function (d, v) {\n      return d.year = parseInt(v);\n    }]\n  };\n\n  ret = function ret(dateStr, format) {\n    if (dateStr.length > 1000) {\n      return null;\n    }\n\n    var isValid = true;\n    var dateInfo = {\n      year: 0,\n      month: 0,\n      day: 0\n    };\n    format.replace(token, function ($0) {\n      if (parseFlags[$0]) {\n        var info = parseFlags[$0];\n        var regExp = info[0];\n        var handler_1 = info[info.length - 1];\n        var index_1 = dateStr.search(regExp);\n\n        if (!~index_1) {\n          isValid = false;\n        } else {\n          dateStr.replace(info[0], function (result) {\n            handler_1(dateInfo, result);\n            dateStr = dateStr.substr(index_1 + result.length);\n            return result;\n          });\n        }\n      }\n\n      return parseFlags[$0] ? \"\" : $0.slice(1, $0.length - 1);\n    });\n\n    if (!isValid) {\n      return null;\n    }\n\n    var parsed = new Date(dateInfo.year, dateInfo.month, dateInfo.day);\n    return new Date(parsed.getFullYear(), parsed.getMonth(), parsed.getDate());\n  };\n\n  return ret(strDate, format);\n}\n\nvar TypePicker = function () {\n  function TypePicker(options) {\n    var _this = this;\n\n    this.useFormatDate = function (date) {\n      return format(date, _this.dateFormat);\n    };\n\n    this.useParseDate = function (date) {\n      return parse(date, _this.dateFormat);\n    };\n\n    this.dateFormat = \"YYYY/MM/DD\";\n    this.apply = null;\n    this.setup(options);\n  }\n\n  TypePicker.prototype.setup = function (options) {\n    var _this = this;\n\n    var element = DOMHelpers.select(options.el);\n    this.element = element;\n    this.element.classList.add(\"calendar\");\n    this.dateFormat = options.format;\n    options.size = 12;\n    this.core = new src_1[\"default\"](options);\n    this.core.listen(function (_a) {\n      var types = _a.types,\n          type = _a.type,\n          payload = _a.payload;\n\n      if (type === types.update) {\n        _this.render(payload);\n      }\n    });\n    this.apply = __assign({}, this.core.apply, {\n      date: function date(_date) {\n        _this.date = _date;\n\n        _this.core.apply.date(_date);\n      }\n    });\n  };\n\n  TypePicker.prototype.render = function (data) {\n    var _this = this;\n\n    console.count(\"payload\");\n    data = data.map(function (item) {\n      item.dates = item.dates.map(function (item) {\n        item.disabled = item.disabled || item.invalid;\n        item.status.isDisabled = item.disabled;\n\n        if (item.invalid) {\n          item.status.inRange = false;\n          item.status.isStart = false;\n          item.status.isEnd = false;\n          item.status.isActive = false;\n        }\n\n        item.value = _this.useFormatDate(item.date);\n        item.label = item.date.getDate();\n        item.day = item.date.getDay();\n        return item;\n      });\n      item.heading = item.month + 1 + \"\\u6708\";\n      return item;\n    });\n    this.element.innerHTML = createTemplate(data);\n\n    var select = function select(selector) {\n      return DOMHelpers.select(_this.element, selector);\n    };\n\n    var prevActionDOM = select(\".calendar-action.prev\");\n    var nextActionDOM = select(\".calendar-action.next\");\n    var nodeList = select(\".calendar-cell\");\n\n    if (prevActionDOM && nextActionDOM) {\n      var listener_1 = function listener_1(step) {\n        var components = Timex.dateComponents(_this.date);\n        components.month += step;\n\n        _this.apply.date(Timex.createDate(components));\n      };\n\n      prevActionDOM.addEventListener(\"click\", function () {\n        return listener_1(-1);\n      });\n      nextActionDOM.addEventListener(\"click\", function () {\n        return listener_1(1);\n      });\n    }\n\n    var _loop_1 = function _loop_1(i) {\n      var node = nodeList[i];\n      node.addEventListener(\"click\", function () {\n        var value = DOMHelpers.attr(node, \"data-date\");\n\n        if (!value) {\n          return;\n        }\n\n        _this.core.apply.select(_this.useParseDate(value));\n      });\n    };\n\n    for (var i = 0; i < nodeList.length; i++) {\n      _loop_1(i);\n    }\n  };\n\n  TypePicker.prototype.onSelect = function (next) {\n    var _this = this;\n\n    this.core.listen(function (_a) {\n      var type = _a.type,\n          types = _a.types,\n          payload = _a.payload;\n\n      if (type === types.select) {\n        var value = payload.map(function (item) {\n          return _this.useFormatDate(item);\n        });\n        next(value);\n      }\n    });\n  };\n\n  return TypePicker;\n}();\n\nexports[\"default\"] = TypePicker;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./example/createPicker.ts\n");

/***/ }),

/***/ "./example/index.ts":
/*!**************************!*\
  !*** ./example/index.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar createPicker_1 = __webpack_require__(/*! ./createPicker */ \"./example/createPicker.ts\");\n\nvar config = {\n  format: \"YYYY/MM/DD\",\n  useInvalidAsSelected: true,\n  selection: 1,\n  limit: 5,\n  el: \"#picker\",\n  startDate: new Date(2019, 0, 1),\n  endDate: new Date(2019, 12, 1)\n};\nvar picker = new createPicker_1[\"default\"](config);\npicker.onSelect(function (value) {\n  document.getElementById(\"value\").innerText = value.join(\",\");\n});\nvar datesToSet = [new Date(\"2019/07/31\"), new Date(\"2019/08/02\")];\npicker.apply.disableDate(function (date) {});\npicker.apply.date(new Date(2019, 0, 1));\npicker.apply.dates(datesToSet);\nwindow[\"pickerApp\"] = picker;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlL2luZGV4LnRzP2FlZjciXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVQaWNrZXJfMSIsInJlcXVpcmUiLCJjb25maWciLCJmb3JtYXQiLCJ1c2VJbnZhbGlkQXNTZWxlY3RlZCIsInNlbGVjdGlvbiIsImxpbWl0IiwiZWwiLCJzdGFydERhdGUiLCJEYXRlIiwiZW5kRGF0ZSIsInBpY2tlciIsIm9uU2VsZWN0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVyVGV4dCIsImpvaW4iLCJkYXRlc1RvU2V0IiwiYXBwbHkiLCJkaXNhYmxlRGF0ZSIsImRhdGUiLCJkYXRlcyIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsT0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsSUFBSUMsY0FBYyxHQUFHQyxtQkFBTyxDQUFDLGlEQUFELENBQTVCOztBQUNBLElBQUlDLE1BQU0sR0FBRztBQUNUQyxRQUFNLEVBQUUsWUFEQztBQUVUQyxzQkFBb0IsRUFBRSxJQUZiO0FBR1RDLFdBQVMsRUFBRSxDQUhGO0FBSVRDLE9BQUssRUFBRSxDQUpFO0FBS1RDLElBQUUsRUFBRSxTQUxLO0FBTVRDLFdBQVMsRUFBRSxJQUFJQyxJQUFKLENBQVMsSUFBVCxFQUFlLENBQWYsRUFBa0IsQ0FBbEIsQ0FORjtBQU9UQyxTQUFPLEVBQUUsSUFBSUQsSUFBSixDQUFTLElBQVQsRUFBZSxFQUFmLEVBQW1CLENBQW5CO0FBUEEsQ0FBYjtBQVNBLElBQUlFLE1BQU0sR0FBRyxJQUFJWCxjQUFjLFdBQWxCLENBQTJCRSxNQUEzQixDQUFiO0FBQ0FTLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixVQUFVYixLQUFWLEVBQWlCO0FBQzdCYyxVQUFRLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUNDLFNBQWpDLEdBQTZDaEIsS0FBSyxDQUFDaUIsSUFBTixDQUFXLEdBQVgsQ0FBN0M7QUFDSCxDQUZEO0FBR0EsSUFBSUMsVUFBVSxHQUFHLENBQUMsSUFBSVIsSUFBSixDQUFTLFlBQVQsQ0FBRCxFQUF5QixJQUFJQSxJQUFKLENBQVMsWUFBVCxDQUF6QixDQUFqQjtBQUNBRSxNQUFNLENBQUNPLEtBQVAsQ0FBYUMsV0FBYixDQUF5QixVQUFVQyxJQUFWLEVBQWdCLENBQ3hDLENBREQ7QUFFQVQsTUFBTSxDQUFDTyxLQUFQLENBQWFFLElBQWIsQ0FBa0IsSUFBSVgsSUFBSixDQUFTLElBQVQsRUFBZSxDQUFmLEVBQWtCLENBQWxCLENBQWxCO0FBQ0FFLE1BQU0sQ0FBQ08sS0FBUCxDQUFhRyxLQUFiLENBQW1CSixVQUFuQjtBQUNBSyxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCWCxNQUF0QiIsImZpbGUiOiIuL2V4YW1wbGUvaW5kZXgudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjcmVhdGVQaWNrZXJfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZVBpY2tlclwiKTtcbnZhciBjb25maWcgPSB7XG4gICAgZm9ybWF0OiBcIllZWVkvTU0vRERcIixcbiAgICB1c2VJbnZhbGlkQXNTZWxlY3RlZDogdHJ1ZSxcbiAgICBzZWxlY3Rpb246IDEsXG4gICAgbGltaXQ6IDUsXG4gICAgZWw6IFwiI3BpY2tlclwiLFxuICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUoMjAxOSwgMCwgMSksXG4gICAgZW5kRGF0ZTogbmV3IERhdGUoMjAxOSwgMTIsIDEpXG59O1xudmFyIHBpY2tlciA9IG5ldyBjcmVhdGVQaWNrZXJfMS5kZWZhdWx0KGNvbmZpZyk7XG5waWNrZXIub25TZWxlY3QoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2YWx1ZVwiKS5pbm5lclRleHQgPSB2YWx1ZS5qb2luKFwiLFwiKTtcbn0pO1xudmFyIGRhdGVzVG9TZXQgPSBbbmV3IERhdGUoXCIyMDE5LzA3LzMxXCIpLCBuZXcgRGF0ZShcIjIwMTkvMDgvMDJcIildO1xucGlja2VyLmFwcGx5LmRpc2FibGVEYXRlKGZ1bmN0aW9uIChkYXRlKSB7XG59KTtcbnBpY2tlci5hcHBseS5kYXRlKG5ldyBEYXRlKDIwMTksIDAsIDEpKTtcbnBpY2tlci5hcHBseS5kYXRlcyhkYXRlc1RvU2V0KTtcbndpbmRvd1tcInBpY2tlckFwcFwiXSA9IHBpY2tlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./example/index.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar List = {\n  map: function map(input, _map) {\n    if (!List.isList(input)) {\n      return [];\n    }\n\n    return input.map(function (item, index) {\n      return _map(item, index);\n    });\n  },\n  create: function create(size, filled) {\n    filled = filled || undefined;\n    var list = [];\n\n    if (!size || size === 0) {\n      return list;\n    }\n\n    for (var i = 0; i < size; i++) {\n      list.push(filled ? typeof filled === \"function\" ? filled(i) : filled : i);\n    }\n\n    return list;\n  },\n  dedup: function dedup(list, key) {\n    var map = {};\n\n    if (list.length <= 0) {\n      return [];\n    }\n\n    return list.reduce(function (acc, currItem) {\n      var curr = currItem;\n\n      if (key) {\n        if (typeof key === \"function\") {\n          curr = key(curr, map);\n        } else {\n          curr = currItem[key];\n        }\n      }\n\n      if (!map[curr]) {\n        map[curr] = 1;\n        acc.push(curr);\n      }\n\n      return acc;\n    }, []);\n  },\n  loop: function loop(list, looper) {\n    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n      var item = list_1[_i];\n      var index = list.indexOf(item);\n      looper(item, index, list);\n    }\n  },\n  every: function every(list, handler) {\n    if (!List.isList(list) || list.length <= 0) {\n      return false;\n    }\n\n    return list.every(handler);\n  },\n  findIndex: function findIndex(list, value) {\n    return list.indexOf(value);\n  },\n  isTop: function isTop(list, value) {\n    return List.findIndex(list, value) === 0;\n  },\n  isTail: function isTail(list, value) {\n    return List.findIndex(list, value) === List.length(list) - 1;\n  },\n  isList: function isList(list) {\n    return list instanceof Array;\n  },\n  includes: function includes(list, item) {\n    return List.findIndex(list, item) >= 0;\n  },\n  length: function length(list) {\n    return list.length;\n  }\n};\n\nvar pipe = function pipe(first) {\n  var more = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    more[_i - 1] = arguments[_i];\n  }\n\n  return more.reduce(function (acc, curr) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return curr(acc.apply(void 0, args));\n    };\n  }, first);\n};\n\nvar isPositiveInteger = function isPositiveInteger(input) {\n  return /^[1-9]?[0-9]+$/.test(\"\" + input);\n};\n\nvar isInterger = function isInterger(input) {\n  return /^(-)?[1-9]?[0-9]+$/.test(\"\" + input);\n};\n\nvar isBool = function isBool(v) {\n  return typeof v === \"boolean\";\n};\n\nvar genRandomNumber = function genRandomNumber() {\n  return (\"\" + Math.random() * 0x100000000).replace(\".\", \"-\");\n};\n\nvar Observer = function () {\n  function Observer(name) {\n    var _this = this;\n\n    this.name = \"observe\";\n    this.clientList = {};\n\n    this.subscribe = function (key, fn) {\n      var typeName = _this.getType(key);\n\n      if (!_this.clientList[typeName]) {\n        _this.clientList[typeName] = [];\n      }\n\n      _this.clientList[typeName].push(fn);\n    };\n\n    this.publish = function (type, args) {\n      Timex.delay(function () {\n        var fns = _this.clientList[_this.getType(type)];\n\n        if (!fns || fns.length === 0) {\n          return false;\n        }\n\n        for (var _i = 0, fns_1 = fns; _i < fns_1.length; _i++) {\n          var fn = fns_1[_i];\n          fn(args);\n        }\n      }, 1);\n    };\n\n    this.name = name;\n  }\n\n  Observer.prototype.getType = function (type) {\n    return \"\" + this.name + type;\n  };\n\n  return Observer;\n}();\n\nvar Selection = function () {\n  function Selection(value) {\n    this.value = value;\n  }\n\n  Selection.prototype.toString = function () {\n    return \"\" + +this.value + this.disabled;\n  };\n\n  return Selection;\n}();\n\nvar Queue = function () {\n  function Queue(size, canPushInvalid) {\n    var _this = this;\n\n    this.size = 1;\n    this.list = [];\n    this.canPushInvalid = false;\n\n    this.last = function () {\n      return _this.list[_this.length() - 1];\n    };\n\n    this.front = function () {\n      return _this.fetch(0);\n    };\n\n    this.length = function () {\n      return _this.list.length;\n    };\n\n    this.fetch = function (index) {\n      return index >= 0 ? _this.list[index] : _this.list;\n    };\n\n    this.isEmpty = function () {\n      return _this.length() <= 0;\n    };\n\n    this.isFullFilled = function () {\n      return _this.length() === _this.size;\n    };\n\n    this.clean = function () {\n      return _this.list = [];\n    };\n\n    this.shift = function () {\n      return _this.list.shift();\n    };\n\n    this.pop = function () {\n      return _this.list.pop();\n    };\n\n    this.push = function (data) {\n      return function (afterPush) {\n        var before = _this.list.filter(function (item) {\n          return item.toString() === data.toString();\n        });\n\n        if (before.length > 0) {\n          if (_this.length() === 1) {\n            return;\n          }\n\n          if (_this.size === 2) {\n            _this.shift();\n          } else {\n            _this.clean();\n          }\n        }\n\n        _this.list.push(data);\n\n        Timex.delay(afterPush);\n      };\n    };\n\n    this.size = size;\n    this.canPushInvalid = canPushInvalid;\n  }\n\n  return Queue;\n}();\n\nvar TimeX = function () {\n  function TimeX() {\n    this.millisecondsOfDate = 1000 * 60 * 60 * 24;\n\n    this.isDate = function (object) {\n      return object instanceof Date;\n    };\n  }\n\n  TimeX.prototype.diff = function (first, second, type, isAbsolute) {\n    if (type === void 0) {\n      type = \"days\";\n    }\n\n    var result;\n\n    if (!Timex.isDate(first) || !Timex.isDate(second)) {\n      return 0;\n    }\n\n    var that = this;\n    var components = {\n      start: that.dateComponents(first),\n      end: that.dateComponents(second)\n    };\n\n    if (type === \"month\") {\n      result = Math.abs(components.start.year * 12 + components.start.month) - (components.end.year * 12 + components.end.month);\n    } else if (type === \"days\") {\n      result = Math.ceil(components.start.time - components.end.time) / Timex.millisecondsOfDate;\n    }\n\n    return isAbsolute ? Math.abs(result) : result;\n  };\n\n  TimeX.prototype.delay = function (handler, duration) {\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    var delayed = setTimeout(function () {\n      handler();\n      clearTimeout(delayed);\n    }, duration);\n  };\n\n  TimeX.prototype.dateComponents = function (input) {\n    var month = input.getMonth();\n    var year = input.getFullYear();\n    var date = input.getDate();\n    var day = input.getDay();\n    var hours = input.getHours();\n    var minutes = input.getMinutes();\n    var seconds = input.getSeconds();\n    var ms = input.getMilliseconds();\n    var dateString = input.toDateString();\n    var isoString = input.toISOString();\n    var time = input.getTime();\n    var timezoneOffset = input.getTimezoneOffset();\n    return {\n      year: year,\n      date: date,\n      month: month,\n      day: day,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      ms: ms,\n      milliseconds: ms,\n      dateString: dateString,\n      isoString: isoString,\n      time: time,\n      timezoneOffset: timezoneOffset\n    };\n  };\n\n  TimeX.prototype.createDate = function (options) {\n    var year = options.year,\n        month = options.month,\n        date = options.date,\n        _a = options.minutes,\n        minutes = _a === void 0 ? 0 : _a,\n        _b = options.hours,\n        hours = _b === void 0 ? 0 : _b,\n        _c = options.seconds,\n        seconds = _c === void 0 ? 0 : _c,\n        _d = options.milliseconds,\n        milliseconds = _d === void 0 ? 0 : _d;\n    return new Date(year, month, date, hours, minutes, seconds, milliseconds);\n  };\n\n  TimeX.prototype.today = function () {\n    var date = new Date();\n    var components = this.dateComponents(date);\n    return this.createDate({\n      year: components.year,\n      month: components.month,\n      date: components.date\n    });\n  };\n\n  return TimeX;\n}();\n\nvar Timex = new TimeX();\n\nfunction genTypePickerData(mapRange, mapDisables) {\n  return function (size, date) {\n    var genCalendar = function genCalendar(_a) {\n      var size = _a.size,\n          date = _a.date;\n      return List.create(size, function (index) {\n        var components = Timex.dateComponents(date);\n        components.month += index;\n        var firstDate = Timex.createDate(__assign({}, components, {\n          date: 1\n        }));\n        var endDate = Timex.createDate(__assign({}, components, {\n          month: components.month + 1,\n          date: 0\n        }));\n        return __assign({}, Timex.dateComponents(firstDate), {\n          dates: Timex.dateComponents(endDate).date,\n          endDate: endDate,\n          firstDate: firstDate\n        });\n      });\n    };\n\n    var genDates = function genDates(calendars) {\n      return List.map(calendars, function (_a) {\n        var day = _a.day,\n            year = _a.year,\n            month = _a.month,\n            endDate = _a.endDate,\n            firstDate = _a.firstDate;\n        return {\n          year: year,\n          month: month,\n          dates: List.create(42, function (index) {\n            var date = Timex.createDate({\n              year: year,\n              month: month,\n              date: index - day + 1\n            });\n            var components = Timex.dateComponents(date);\n            var invalid = date > endDate || date < firstDate;\n            return {\n              date: date,\n              invalid: invalid,\n              disabled: invalid || mapDisables(date),\n              status: mapRange(components.dateString)\n            };\n          })\n        };\n      });\n    };\n\n    var genSize = function genSize(_a) {\n      var size = _a.size,\n          date = _a.date;\n      return {\n        size: size >= 0 ? size : size * -1,\n        date: date\n      };\n    };\n\n    return pipe(genSize, genCalendar, genDates)({\n      size: size,\n      date: date\n    });\n  };\n}\n\nfunction checkQueue(queue, disabled, unpushable, popable) {\n  var currentQueueLength = queue.length();\n  var nextQueueLength = currentQueueLength + 1;\n\n  if (disabled) {\n    if (queue.size !== 2 || queue.size === 2 && (currentQueueLength === 1 && unpushable() || queue.isEmpty() || queue.isFullFilled() || !queue.canPushInvalid)) {\n      return false;\n    }\n  } else if (queue.size === 2) {\n    if (currentQueueLength) {\n      if (unpushable()) {\n        queue.shift();\n      } else if (popable()) {\n        queue.pop();\n      }\n    }\n  }\n\n  if (nextQueueLength > queue.size) {\n    queue.clean();\n  }\n\n  return true;\n}\n\nfunction setDatesDedupe(date, map) {\n  if (!map[date.toDateString()]) {\n    return date;\n  }\n\n  return null;\n}\n\nfunction getOptions(option) {\n  option = option || {};\n  var partial = {};\n\n  if (isInterger(option.size)) {\n    partial.size = option.size;\n  }\n\n  if (isPositiveInteger(option.selection)) {\n    partial.selection = option.selection;\n  }\n\n  if (isBool(option.useInvalidAsSelected)) {\n    partial.useInvalidAsSelected = option.useInvalidAsSelected;\n\n    if (option.useInvalidAsSelected === true) {\n      partial.selection = 2;\n    }\n  }\n\n  return partial;\n}\n\nvar mapStatusOfDate = function mapStatusOfDate(range, useRange) {\n  return function (dateString) {\n    var length = range.length();\n    var status = {\n      isActive: false,\n      isEnd: false,\n      isStart: false,\n      inRange: false\n    };\n\n    if (length <= 0) {\n      return status;\n    }\n\n    var dateToString = function dateToString(date) {\n      return Timex.dateComponents(date).dateString;\n    };\n\n    if (!useRange) {\n      status.isActive = pipe(function (data) {\n        return List.map(data, function (item) {\n          return item.value;\n        });\n      }, function (data) {\n        return List.map(data, dateToString);\n      }, function (data) {\n        return List.includes(data, dateString);\n      })(range.fetch());\n    } else {\n      var first_1 = range.fetch(0);\n      var last = range.fetch(range.length() - 1);\n      var getRange = pipe(function ($1, $2) {\n        return Timex.diff($1, $2, \"days\", true);\n      }, function (size) {\n        return List.create(size + 1);\n      }, function (range) {\n        return List.map(range, function (item) {\n          var components = Timex.dateComponents(first_1.value);\n          components.date += item;\n          var date = Timex.createDate(components);\n          return dateToString(date);\n        });\n      });\n      var data = getRange(last.value, first_1.value);\n      status.isActive = List.isTop(data, dateString) || List.isTail(data, dateString);\n      status.inRange = List.includes(data, dateString);\n      status.isStart = List.isTop(data, dateString);\n      status.isEnd = List.isTail(data, dateString);\n\n      if (status.isStart || status.isEnd) {\n        status.inRange = false;\n      }\n    }\n\n    return status;\n  };\n};\n\nvar Updater = function () {\n  function Updater(queue, disables, updater) {\n    this.updater = null;\n    this.queue = null;\n    this.data = [];\n    this.disables = null;\n    this.disables = disables;\n    this.queue = queue;\n\n    this.updater = function (data) {\n      return updater(queue, data);\n    };\n  }\n\n  Updater.prototype.checkQueue = function (item) {\n    var queue = this.queue;\n    var disables = this.disables;\n    var current = item.value;\n    var last = queue.last();\n    var first = queue.front();\n\n    var unpushable = function unpushable() {\n      if (item.disabled && current < last.value) {\n        return true;\n      }\n\n      var getSize = function getSize(_a) {\n        var current = _a[0],\n            first = _a[1];\n        return [Timex.diff(current, first, \"days\", true), first];\n      };\n\n      var create = function create(date) {\n        return function (index) {\n          var components = Timex.dateComponents(date);\n          components.date += index;\n          return Timex.createDate(components);\n        };\n      };\n\n      var findDates = function findDates(_a) {\n        var size = _a[0],\n            date = _a[1];\n        return List.create(size, create(date));\n      };\n\n      var findDisables = function findDisables(dates) {\n        return List.map(dates, function (date) {\n          return disables.find(date) && Timex.dateComponents(date).time !== Timex.dateComponents(current).time;\n        });\n      };\n\n      var filterTrue = function filterTrue(data) {\n        return data.filter(function (item) {\n          return item === true;\n        });\n      };\n\n      var has = function has(data) {\n        return List.length(data) > 0;\n      };\n\n      return pipe(getSize, findDates, findDisables, filterTrue, has)([item.value, first.value]);\n    };\n\n    var popable = function popable() {\n      return first.value > current;\n    };\n\n    return checkQueue(queue, item.disabled, unpushable, popable);\n  };\n\n  Updater.prototype.push = function (date, cleanQueue) {\n    var _this = this;\n\n    if (cleanQueue === void 0) {\n      cleanQueue = false;\n    }\n\n    var createItem = function createItem(value) {\n      if (!Timex.isDate(value)) {\n        console.error(\"Error: expected Date object, but got \" + value + \" \");\n        return;\n      }\n\n      var components = Timex.dateComponents(value);\n      var date = Timex.createDate(components);\n      var select = new Selection(date);\n      select.disabled = _this.disables.find(date);\n      return select;\n    };\n\n    var data = List.isList(date) ? date : [date];\n\n    if (cleanQueue) {\n      this.queue.clean();\n      this.data = [];\n    }\n\n    this.data = List.map(data, createItem);\n\n    if (List.length(this.data) <= 0) {\n      this.updater([]);\n    }\n\n    List.loop(this.data, function (item) {\n      Timex.delay(function () {\n        item.disabled = _this.disables.find(item.value);\n      }, 0);\n\n      var canPush = _this.checkQueue(item);\n\n      var callUpdate = function callUpdate() {\n        return _this.updater(_this.queue.fetch());\n      };\n\n      if (canPush) {\n        _this.queue.push(item)(callUpdate);\n      }\n    });\n  };\n\n  return Updater;\n}();\n\nvar TypePickerListenerTypes = {\n  update: \"update\",\n  select: \"select\"\n};\n\nfunction TypePicker(option) {\n  var _this = this;\n\n  var disables = {\n    find: function find(date) {\n      return false;\n    }\n  };\n\n  var config = __assign({\n    selection: 1,\n    date: Timex.today(),\n    useInvalidAsSelected: false,\n    size: 1\n  }, getOptions(option));\n\n  var observer = new Observer(genRandomNumber());\n  var queue = new Queue(config.selection, config.useInvalidAsSelected);\n\n  var update = function update(queue, selectedValue) {\n    var createData = pipe(genTypePickerData(mapStatusOfDate(queue, config.selection === 2), disables.find));\n    observer.publish(TypePickerListenerTypes.update, createData(config.size, config.date));\n\n    if (List.isList(selectedValue)) {\n      observer.publish(TypePickerListenerTypes.select, List.map(selectedValue, function (item) {\n        return item.value;\n      }));\n    }\n  };\n\n  var selection = new Updater(queue, disables, update);\n\n  var applyDates = function applyDates(dates) {\n    var setDates = pipe(function (dates) {\n      return dates.slice(0, config.selection);\n    }, function (dates) {\n      return dates.filter(Timex.isDate);\n    }, function (dates) {\n      return List.dedup(dates, setDatesDedupe);\n    }, function (dates) {\n      return List.every(dates, Timex.isDate) ? dates : [];\n    }, function (dates) {\n      return dates.sort(function (t1, t2) {\n        return +t1 - +t2;\n      });\n    });\n    Timex.delay(function () {\n      selection.push(setDates(dates), true);\n    });\n  };\n\n  this.listen = function (next) {\n    observer.subscribe(TypePickerListenerTypes.update, function (payload) {\n      return next({\n        type: TypePickerListenerTypes.update,\n        payload: payload,\n        types: TypePickerListenerTypes\n      });\n    });\n    observer.subscribe(TypePickerListenerTypes.select, function (payload) {\n      return next({\n        type: TypePickerListenerTypes.select,\n        payload: payload,\n        types: TypePickerListenerTypes\n      });\n    });\n  };\n\n  this.apply = {\n    dates: applyDates,\n    disableDate: function disableDate(handler) {\n      return disables.find = handler;\n    },\n    date: function date(_date) {\n      config.date = _date;\n      selection.updater(null);\n    },\n    update: function update() {\n      return selection.updater(null);\n    },\n    select: function select(date) {\n      if (List.isList(date)) {\n        date = date.pop();\n      }\n\n      selection.push(date);\n    }\n  };\n  Timex.delay(function () {\n    _this.apply.select(config.date, true);\n  });\n}\n\nexports[\"default\"] = TypePicker;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ });